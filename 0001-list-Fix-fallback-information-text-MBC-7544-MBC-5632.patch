From af1fd9fc25b6023a2813c565387d648ebd9859cc Mon Sep 17 00:00:00 2001
From: Jussi Kukkonen <jku@linux.intel.com>
Date: Fri, 8 Oct 2010 12:28:46 +0300
Subject: [PATCH] list: Fix fallback information text (MBC#7544, MBC#5632)

Fix several bugs in fallback info display  (e.g. "Sorry, we can't
find any networks. You could try disabling Offline mode"). The major
issue was CarrickList not actually following connman.Manager property
changes: it just tried to guess when the properties might have
changed.

Cherry picked from master for MeeGo 1.1. Commits a86d01df, 8af39e8af.
---
 carrick/carrick-list.c |  448 +++++++++++++++++++-----------------------------
 carrick/carrick-list.h |    2 -
 carrick/carrick-pane.c |    2 -
 3 files changed, 173 insertions(+), 279 deletions(-)

diff --git a/carrick/carrick-list.c b/carrick/carrick-list.c
index 29530c4..3f407af 100644
--- a/carrick/carrick-list.c
+++ b/carrick/carrick-list.c
@@ -71,9 +71,6 @@ struct _CarrickListPrivate
   gboolean have_threeg;
   gboolean have_wimax;
   gboolean have_bluetooth;
-
-  guint enabled_count;
-  guint available_count;
 };
 
 enum {
@@ -85,6 +82,7 @@ enum {
 
 static void carrick_list_set_model (CarrickList *list, CarrickNetworkModel *model);
 static void carrick_list_add (CarrickList *list, GtkTreePath *path);
+static void carrick_list_update_fallback (CarrickList *self);
 
 static void
 carrick_list_get_property (GObject *object, guint property_id,
@@ -502,7 +500,9 @@ _row_deleted_cb (GtkTreeModel *tree_model,
       gtk_container_foreach (GTK_CONTAINER (priv->box),
                              (GtkCallback)gtk_widget_destroy,
                              NULL);
-      carrick_list_set_fallback (CARRICK_LIST (user_data));
+
+      carrick_list_update_fallback (CARRICK_LIST (user_data));
+      gtk_widget_show (priv->fallback);
     }
   else
     {
@@ -603,6 +603,111 @@ _create_service_item (GtkTreeModel *model,
 }
 
 static void
+list_update_property (const gchar *property,
+                      GValue      *value,
+                      gpointer     user_data)
+{
+  CarrickList        *list = user_data;
+  CarrickListPrivate *priv = list->priv;
+
+  if (g_str_equal (property, "OfflineMode"))
+    {
+      priv->offline_mode = g_value_get_boolean (value);
+    }
+  else if (g_str_equal (property, "AvailableTechnologies"))
+    {
+      gchar **tech = g_value_get_boxed (value);
+      gint    i;
+
+      priv->have_wifi = FALSE;
+      priv->have_ethernet = FALSE;
+      priv->have_threeg = FALSE;
+      priv->have_wimax = FALSE;
+      priv->have_bluetooth = FALSE;
+
+      for (i = 0; i < g_strv_length (tech); i++)
+        {
+          if (g_str_equal ("wifi", *(tech + i)))
+            priv->have_wifi = TRUE;
+          else if (g_str_equal ("wimax", *(tech + i)))
+            priv->have_wimax = TRUE;
+          else if (g_str_equal ("bluetooth", *(tech + i)))
+            priv->have_bluetooth = TRUE;
+          else if (g_str_equal ("cellular", *(tech + i)))
+            priv->have_threeg = TRUE;
+          else if (g_str_equal ("ethernet", *(tech + i)))
+            priv->have_ethernet = TRUE;
+        }
+    }
+  else if (g_str_equal (property, "EnabledTechnologies"))
+    {
+      gchar **tech = g_value_get_boxed (value);
+      gint    i;
+
+      priv->wifi_enabled = FALSE;
+      priv->ethernet_enabled = FALSE;
+      priv->threeg_enabled = FALSE;
+      priv->wimax_enabled = FALSE;
+      priv->bluetooth_enabled = FALSE;
+
+      for (i = 0; i < g_strv_length (tech); i++)
+        {
+          if (g_str_equal ("wifi", *(tech + i)))
+            priv->wifi_enabled = TRUE;
+          else if (g_str_equal ("wimax", *(tech + i)))
+            priv->wimax_enabled = TRUE;
+          else if (g_str_equal ("bluetooth", *(tech + i)))
+            priv->bluetooth_enabled = TRUE;
+          else if (g_str_equal ("cellular", *(tech + i)))
+            priv->threeg_enabled = TRUE;
+          else if (g_str_equal ("ethernet", *(tech + i)))
+            priv->ethernet_enabled = TRUE;
+        }
+    }
+}
+
+static void
+_mngr_property_changed_cb (DBusGProxy  *manager,
+                           const gchar *property,
+                           GValue      *value,
+                           CarrickList *list)
+{
+  list_update_property (property, value, list);
+
+  if (GTK_WIDGET_VISIBLE (list->priv->fallback))
+      carrick_list_update_fallback (list);
+}
+
+static void
+_mngr_get_properties_cb (DBusGProxy     *manager,
+                         GHashTable     *properties,
+                         GError         *error,
+                         gpointer        user_data)
+{
+  CarrickList *list = user_data;
+  CarrickListPrivate *priv = list->priv;
+
+  if (error)
+    {
+      g_debug ("Error when ending GetProperties call: %s",
+               error->message);
+      g_error_free (error);
+
+      priv->have_daemon = FALSE;
+    }
+  else
+    {
+      priv->have_daemon = TRUE;
+      g_hash_table_foreach (properties,
+                            (GHFunc) list_update_property,
+                            list);
+      g_hash_table_unref (properties);
+    }
+
+  carrick_list_update_fallback (list);
+}
+
+static void
 carrick_list_set_model (CarrickList         *list,
                         CarrickNetworkModel *model)
 {
@@ -629,8 +734,21 @@ carrick_list_set_model (CarrickList         *list,
 
   if (model)
     {
+      DBusGProxy *manager;
+
       priv->model = g_object_ref (model);
 
+      /* Keep track of OfflineMode, AvailableTechnologies and 
+       * EnabledTechnologies using connman.Manager */
+      manager = carrick_network_model_get_proxy (priv->model);
+      dbus_g_proxy_connect_signal (manager,
+                                   "PropertyChanged",
+                                   G_CALLBACK (_mngr_property_changed_cb),
+                                   list, NULL);
+      org_moblin_connman_Manager_get_properties_async (manager,
+                                                       _mngr_get_properties_cb,
+                                                       list);
+
       gtk_tree_model_foreach (GTK_TREE_MODEL (model),
                               _create_service_item,
                               NULL);
@@ -830,30 +948,49 @@ carrick_list_add (CarrickList *list,
 
 
 static void
-_set_and_show_fallback (CarrickList *self)
+_append_tech_string (GString *technologies, char *tech, gboolean last)
 {
-  CarrickListPrivate *priv = self->priv;
-  gchar              *fallback = NULL;
-  /*
-   * Translator note: The disabled technologies available to be turned on is put together at
+  /* Translator note: The disabled technologies available to be turned on is put together at
    * runtime.
-   * The conjunction 'or' will be at the end of a choice of disabled technologies,
-   * for example 'WiFi, WiMAX or 3G.
-   */
+   * The conjunction ' or ' will be at the end of a choice of disabled technologies,
+   * for example 'You could try enabling WiFi, WiMAX or 3G'.
+   * Note that you need to include spaces on both sides of the word/phrase 
+   * here -- unless you want it joined with previous or next word. */
   gchar              *conjunction = _(" or ");
-  /*
-   * Translator note: the comma ',' will be used to join the different disabled technologies
-   * as in the above example; 'WiFi, WiMAX or 3G'
-   */
+
+  /* Translator note: the comma ', ' will be used to join the different 
+   * disabled technologies as in the example: 
+   * 'You could try enabling WiFi, WiMAX or 3G'
+   * Note that you need to include spaces in the string, unless you 
+   * want the words to appear right next to the comma. */
   gchar              *comma = _(", ");
+
+  if (technologies->len == 0)
+    g_string_append (technologies, tech);
+  else if (!last)
+    g_string_append_printf (technologies, "%s%s",
+                            comma, tech);
+  else
+    g_string_append_printf (technologies, "%s%s",
+                            conjunction, tech);
+}
+
+static void
+carrick_list_update_fallback (CarrickList *self)
+{
+  CarrickListPrivate *priv = self->priv;
+  gchar              *fallback = NULL;
+  GString            *technologies = NULL;
+  guint               count = 0;
+
+  /* Translator note: these technology names will be used in forming
+   * sentences like : 'You could try enabling WiFi, WiMAX or 3G'
+   */
   gchar              *ethernet = _("wired");
   gchar              *wifi = _("WiFi");
   gchar              *wimax = _("WiMAX");
   gchar              *cellular = _("3G");
   gchar              *bluetooth = _("Bluetooth");
-  GString            *technologies = NULL;
-  guint               count = 0;
-  gboolean            processed_first = FALSE;
 
   /* Need to add some fall-back content */
   if (!priv->have_daemon)
@@ -883,130 +1020,45 @@ _set_and_show_fallback (CarrickList *self)
            (priv->have_wimax && !priv->wimax_enabled) ||
            (priv->have_bluetooth && !priv->bluetooth_enabled))
     {
+      guint available, enabled;
+
       /* How many strings we're joining */
-      count = priv->available_count - priv->enabled_count;
-      technologies = g_string_new (" ");
-      processed_first = FALSE;
+      available = priv->have_wifi + priv->have_ethernet + 
+                  priv->have_threeg + priv->have_wimax + 
+                  priv->have_bluetooth;
+      enabled = priv->wifi_enabled + priv->ethernet_enabled +
+                priv->threeg_enabled + priv->wimax_enabled +
+                priv->bluetooth_enabled;
+      count = available - enabled;
+      technologies = g_string_new (NULL);
 
       if (priv->have_wifi && !priv->wifi_enabled)
         {
-          if (count > 1)
-            {
-              g_string_append_printf (technologies,
-                                      "%s%s",
-                                      wifi,
-                                      comma);
-            }
-          else
-            {
-              g_string_append (technologies,
-                               wifi);
-            }
-          processed_first = TRUE;
+          _append_tech_string (technologies, wifi, count == 1);
           count--;
         }
 
       if (priv->have_wimax && !priv->wimax_enabled)
         {
-          if (!processed_first)
-            {
-              g_string_append (technologies,
-                               wimax);
-              processed_first = TRUE;
-            }
-          else if (count > 1)
-            {
-              g_string_append_printf (technologies,
-                                      "%s%s",
-                                      wimax,
-                                      comma);
-            }
-          else
-            {
-              g_string_append_printf (technologies,
-                                      "%s%s",
-                                      conjunction,
-                                      wimax);
-            }
-
+          _append_tech_string (technologies, wimax, count == 1);
           count--;
         }
 
       if (priv->have_threeg && !priv->threeg_enabled)
         {
-          if (!processed_first)
-            {
-              g_string_append (technologies,
-                               cellular);
-              processed_first = TRUE;
-            }
-          else if (count > 1)
-            {
-              g_string_append_printf (technologies,
-                                      "%s%s",
-                                      cellular,
-                                      comma);
-            }
-          else
-            {
-              g_string_append_printf (technologies,
-                                      "%s%s",
-                                      conjunction,
-                                      cellular);
-            }
-
+          _append_tech_string (technologies, cellular, count == 1);
           count--;
         }
 
       if (priv->have_bluetooth && !priv->bluetooth_enabled)
         {
-          if (!processed_first)
-            {
-              g_string_append (technologies,
-                               bluetooth);
-              processed_first = TRUE;
-            }
-          else if (count > 1)
-            {
-              g_string_append_printf (technologies,
-                                      "%s%s",
-                                      bluetooth,
-                                      comma);
-            }
-          else
-            {
-              g_string_append_printf (technologies,
-                                      "%s%s",
-                                      conjunction,
-                                      bluetooth);
-            }
-
+          _append_tech_string (technologies, bluetooth, count == 1);
           count--;
         }
 
       if (priv->have_ethernet && !priv->ethernet_enabled)
         {
-          if (!processed_first)
-            {
-              g_string_append (technologies,
-                               ethernet);
-              processed_first = TRUE;
-            }
-          else if (count > 1)
-            {
-              g_string_append_printf (technologies,
-                                      "%s%s",
-                                      ethernet,
-                                      comma);
-            }
-          else
-            {
-              g_string_append_printf (technologies,
-                                      "%s%s",
-                                      conjunction,
-                                      ethernet);
-            }
-
+          _append_tech_string (technologies, ethernet, count == 1);
           count--;
         }
 
@@ -1028,162 +1080,9 @@ _set_and_show_fallback (CarrickList *self)
     }
 
   gtk_label_set_text (GTK_LABEL (priv->fallback), fallback);
-
-  if (fallback)
-    gtk_widget_show (priv->fallback);
-
   g_free (fallback);
 }
 
-static void
-list_update_property (const gchar *property,
-                      GValue      *value,
-                      gpointer     user_data)
-{
-  CarrickList        *list = user_data;
-  CarrickListPrivate *priv = list->priv;
-  gboolean state_changed = FALSE;
-
-  if (g_str_equal (property, "OfflineMode"))
-    {
-      priv->offline_mode = g_value_get_boolean (value);
-      state_changed = TRUE;
-    }
-  else if (g_str_equal (property, "AvailableTechnologies"))
-    {
-      gchar **tech = g_value_get_boxed (value);
-      gint    i;
-
-      priv->have_wifi = FALSE;
-      priv->have_ethernet = FALSE;
-      priv->have_threeg = FALSE;
-      priv->have_wimax = FALSE;
-      priv->have_bluetooth = FALSE;
-      priv->available_count = 0;
-
-      for (i = 0; i < g_strv_length (tech); i++)
-        {
-          if (g_str_equal ("wifi", *(tech + i)))
-            {
-              priv->have_wifi = TRUE;
-              priv->available_count ++;
-            }
-          else if (g_str_equal ("wimax", *(tech + i)))
-            {
-              priv->have_wimax = TRUE;
-              priv->available_count ++;
-            }
-          else if (g_str_equal ("bluetooth", *(tech + i)))
-            {
-              priv->have_bluetooth = TRUE;
-              priv->available_count ++;
-            }
-          else if (g_str_equal ("cellular", *(tech + i)))
-            {
-              priv->have_threeg = TRUE;
-              priv->available_count ++;
-            }
-          else if (g_str_equal ("ethernet", *(tech + i)))
-            {
-              priv->have_ethernet = TRUE;
-              priv->available_count ++;
-            }
-        }
-      state_changed = TRUE;
-    }
-  else if (g_str_equal (property, "EnabledTechnologies"))
-    {
-      gchar **tech = g_value_get_boxed (value);
-      gint    i;
-
-      priv->wifi_enabled = FALSE;
-      priv->ethernet_enabled = FALSE;
-      priv->threeg_enabled = FALSE;
-      priv->wimax_enabled = FALSE;
-      priv->bluetooth_enabled = FALSE;
-      priv->enabled_count = 0;
-
-      for (i = 0; i < g_strv_length (tech); i++)
-        {
-          if (g_str_equal ("wifi", *(tech + i)))
-            {
-              priv->wifi_enabled = TRUE;
-              priv->enabled_count ++;
-            }
-          else if (g_str_equal ("wimax", *(tech + i)))
-            {
-              priv->wimax_enabled = TRUE;
-              priv->enabled_count ++;
-            }
-          else if (g_str_equal ("bluetooth", *(tech + i)))
-            {
-              priv->bluetooth_enabled = TRUE;
-              priv->enabled_count ++;
-            }
-          else if (g_str_equal ("cellular", *(tech + i)))
-            {
-              priv->threeg_enabled = TRUE;
-              priv->enabled_count ++;
-            }
-          else if (g_str_equal ("ethernet", *(tech + i)))
-            {
-              priv->ethernet_enabled = TRUE;
-              priv->enabled_count ++;
-            }
-        }
-      state_changed = TRUE;
-    }
-
-  if (state_changed)
-    {
-      _set_and_show_fallback (list);
-    }
-}
-
-static void
-list_get_properties_cb (DBusGProxy     *manager,
-                        GHashTable     *properties,
-                        GError         *error,
-                        gpointer        user_data)
-{
-  CarrickList *list = user_data;
-  CarrickListPrivate *priv = list->priv;
-
-  if (error)
-    {
-      g_debug ("Error when ending GetProperties call: %s",
-               error->message);
-      g_error_free (error);
-
-      priv->have_daemon = FALSE;
-      _set_and_show_fallback (list);
-    }
-  else
-    {
-      priv->have_daemon = TRUE;
-      g_hash_table_foreach (properties,
-                            (GHFunc) list_update_property,
-                            list);
-      g_hash_table_unref (properties);
-    }
-}
-
-void
-carrick_list_set_fallback (CarrickList *list)
-{
-  CarrickListPrivate *priv = list->priv;
-  DBusGProxy *manager = carrick_network_model_get_proxy (priv->model);
-
-  /*
-   * Make D-Bus calls to determine whether there's a reason that we have no
-   * content. If so, set the fallback label.
-   */
-  org_moblin_connman_Manager_get_properties_async
-    (manager,
-     list_get_properties_cb,
-     list);
-}
-
 static GObject *
 carrick_list_constructor (GType                  gtype,
                           guint                  n_properties,
@@ -1216,14 +1115,13 @@ carrick_list_constructor (GType                  gtype,
   gtk_container_add (GTK_CONTAINER (viewport),
                      box);
 
-  priv->fallback = gtk_label_new ("");
   gtk_label_set_line_wrap (GTK_LABEL (priv->fallback),
                            TRUE);
   gtk_widget_set_size_request (priv->fallback,
                                550,
                                -1);
-  gtk_misc_set_padding (GTK_MISC (priv->fallback), 0, 12);
   gtk_widget_show (priv->fallback);
+  gtk_misc_set_padding (GTK_MISC (priv->fallback), 0, 12);
   gtk_box_pack_start (GTK_BOX (box), priv->fallback,
                       FALSE, FALSE, 2);
 
@@ -1295,7 +1193,7 @@ carrick_list_init (CarrickList *self)
 
   priv = self->priv = LIST_PRIVATE (self);
 
-  priv->fallback = NULL;
+  priv->fallback = gtk_label_new ("");
   priv->have_daemon = FALSE;
 
   gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (self),
diff --git a/carrick/carrick-list.h b/carrick/carrick-list.h
index 393eab5..c39c14c 100644
--- a/carrick/carrick-list.h
+++ b/carrick/carrick-list.h
@@ -84,8 +84,6 @@ void carrick_list_set_notification_manager (CarrickList                *list,
                                             CarrickNotificationManager *notification_manager);
 CarrickNotificationManager *carrick_list_get_notification_manager (CarrickList *list);
 
-void carrick_list_set_fallback (CarrickList *list);
-
 G_END_DECLS
 
 #endif /* _CARRICK_LIST_H */
diff --git a/carrick/carrick-pane.c b/carrick/carrick-pane.c
index d1494ec..af13b6c 100644
--- a/carrick/carrick-pane.c
+++ b/carrick/carrick-pane.c
@@ -1247,8 +1247,6 @@ pane_have_daemon (CarrickPane *pane,
       gtk_widget_set_visible (priv->wimax_box, FALSE);
       gtk_widget_set_visible (priv->wimax_sep, FALSE);
       gtk_widget_set_visible (priv->bluetooth_box, FALSE);
-
-      carrick_list_set_fallback (CARRICK_LIST (priv->service_list));
     }
 }
 
-- 
1.7.1

